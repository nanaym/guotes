{"version":3,"sources":["components/DeleteOne.js","components/DeleteAll.js","components/PostQuote.js","components/GetQuote.js","App.js","registerServiceWorker.js","index.js"],"names":["DeleteOne","deleteQuote","event","setState","id","target","value","deleteSubmit","preventDefault","axios","delete","state","then","res","console","log","data","props","update","onSubmit","this","type","name","placeholder","onChange","React","Component","DeleteAll","PostQuote","author","quotetext","handleQuoteChange","handleAuthorChange","postSubmit","post","apiUrl","GetQuote","getSubmit","get","quotes","onClick","map","q","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.65252fdf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass DeleteOne extends React.Component {\r\n\r\n  deleteQuote = event => {\r\n    this.setState({ id: event.target.value });\r\n  }\r\n  deleteSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    axios.delete(`http://localhost:8080/api/quotes/${this.state.id}`)\r\n      .then(res => {\r\n        console.log(res);\r\n        console.log(res.data);\r\n        this.props.update();\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.deleteSubmit}>\r\n          <label>\r\n            <input type=\"text\" name=\"id\" placeholder=\"Enter number\" onChange={this.deleteQuote} />\r\n          </label>\r\n          <button type=\"submit\">Delete by id</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DeleteOne;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass DeleteAll extends React.Component {\r\n\r\n  deleteSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    axios.delete(`http://localhost:8080/api/quotes`)\r\n      .then(res => {\r\n        console.log(res);\r\n        console.log(res.data);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.deleteSubmit}>\r\n          <button type=\"submit\">Delete all</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n  export default DeleteAll;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nclass PostQuote extends React.Component {\r\n  state={author:\"\", quotetext:\"\"};\r\nhandleQuoteChange = event => {\r\n  this.setState({ quotetext: event.target.value });\r\n}\r\nhandleAuthorChange = event => {\r\n  this.setState({ author: event.target.value });\r\n}\r\npostSubmit = event => {\r\n  event.preventDefault();\r\n\r\n  axios.post(`http://localhost:8080/api/quotes`, this.state)\r\n    .then(res => {\r\n      console.log(res);\r\n      console.log(res.data);\r\n      this.props.update();\r\n    })\r\n}\r\n\r\nrender() {\r\n  return (\r\n    <div>\r\n      <form onSubmit={this.postSubmit}>\r\n        <label>\r\n          <input type=\"text\" name=\"quote\" value={this.state.quotetext} placeholder=\"Quote\" onChange={this.handleQuoteChange} />\r\n          <input type=\"text\" name=\"author\" value={this.state.author} placeholder=\"Author\" onChange={this.handleAuthorChange} />\r\n        </label>\r\n        <button type=\"submit\">Add quote</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n}\r\n\r\n  export default PostQuote;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport DeleteOne from './DeleteOne';\r\nimport DeleteAll from './DeleteAll';\r\nimport PostQuote from './PostQuote';\r\nconst apiUrl = \"http://localhost:8080/api/quotes\";\r\n\r\nclass GetQuote extends Component {\r\n    getSubmit = event => {\r\n        // event.preventDefault();\r\n\r\n        axios.get(`http://localhost:8080/api/quotes`, this.state)\r\n            .then(res => {\r\n                console.log(res);\r\n                console.log(res.data);\r\n                this.props.update();\r\n            })\r\n    }\r\n    state = { quotes: [] }\r\n    componentDidMount() {\r\n        // this.update();\r\n    }\r\n    update = () => {\r\n        axios.get(apiUrl)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                const quotes = res.data;\r\n                this.setState({ quotes: quotes });\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                    <button type=\"button\" onClick={this.update}>Get quotes</button>\r\n                <ul>\r\n                    {this.state.quotes.map(q => {\r\n                        return (<li>(<strong>{q.id}</strong>)<em> {q.quotetext}</em>\r\n                            <br></br>\r\n                            <strong>by:</strong> {q.author}</li>)\r\n                    })}\r\n                </ul>\r\n                <PostQuote update={this.update} /> <br></br>\r\n                <DeleteOne update={this.update} /> <br></br>\r\n                <DeleteAll update={this.update} />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GetQuote;","import React, { Component } from 'react';\nimport GetQuote from './components/GetQuote';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Quotes</h1>\n        <GetQuote/>\n      </div>\n    ); \n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}